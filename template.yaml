AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  ProjectLambdaAPI

  SAM Template for ProjectLambdaAPI

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: [ ApiUsagePlan ]
    Properties:
      Name: !Join [ "", [ { "Ref": "AWS::StackName" }, "-apikey" ] ]
      Description: "CloudFormation API Key V1"
      Enabled: true

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn:
      - BasicAWSApiGatewaystagStage
    Properties:
      ApiStages:
        - ApiId: !Ref BasicAWSApiGateway
          Stage: stag
      Description: !Join [ " ", [ { "Ref": "AWS::StackName" }, "usage plan" ] ]
      Quota:
        Limit: 1000
        Period: MONTH
      UsagePlanName: !Join [ "", [ { "Ref": "AWS::StackName" }, "-usage-plan" ] ]

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    DependsOn:
      - BasicAWSApiGateway
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  BasicAWSApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: Basic AWS Api Gateway
      StageName: stag
      Auth:
        ApiKeyRequired: true # sets for all methods

  LambdaFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: project-lambda-api
      Environment:
        Variables:
          LOOKUP_TABLE: !Ref FilesTable
          FILES_BUCKET: !Ref FilesBucket
      CodeUri: lambda_app/
      Handler: app.lambda_handler
      Runtime: python3.10
      Architectures:
        - x86_64
      Events:
        LambdaApi:
          Type: Api
          Properties:
            RestApiId: !Ref BasicAWSApiGateway
            Path: /get-file/{id}
            Method: GET
            Auth:
              ApiKeyRequired: true
      Role: !GetAtt LambdaExecutionRole.Arn

  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: project-lambda-api-files
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: project-lambda-api-files-lookup
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: LambdaFilesTablePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                Effect: "Allow"
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${FilesTable}"
        - PolicyName: LambdaFilesBucketPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Effect: "Allow"
                Resource: !Sub "arn:aws:s3:::${FilesBucket}/*"





